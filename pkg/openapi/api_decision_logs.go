/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"github.com/permitio/permit-golang/pkg/models"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// DecisionLogsApiService DecisionLogsApi service
type DecisionLogsApiService service

type ApiListPdpDecisionLogsRequest struct {
	ctx           context.Context
	ApiService    *DecisionLogsApiService
	projId        string
	envId         string
	pdpId         string
	users         *[]string
	approved      *bool
	resources     *[]string
	timestampFrom *int32
	timestampTo   *int32
	page          *int32
	perPage       *int32
}

// List of user IDs to filter by
func (r ApiListPdpDecisionLogsRequest) Users(users []string) ApiListPdpDecisionLogsRequest {
	r.users = &users
	return r
}

// Filter by approved decisions
func (r ApiListPdpDecisionLogsRequest) Approved(approved bool) ApiListPdpDecisionLogsRequest {
	r.approved = &approved
	return r
}

// Filter by resources
func (r ApiListPdpDecisionLogsRequest) Resources(resources []string) ApiListPdpDecisionLogsRequest {
	r.resources = &resources
	return r
}

// Filter by timestamp from
func (r ApiListPdpDecisionLogsRequest) TimestampFrom(timestampFrom int32) ApiListPdpDecisionLogsRequest {
	r.timestampFrom = &timestampFrom
	return r
}

// Filter by timestamp to
func (r ApiListPdpDecisionLogsRequest) TimestampTo(timestampTo int32) ApiListPdpDecisionLogsRequest {
	r.timestampTo = &timestampTo
	return r
}

// Page number of the results to fetch, starting at 1.
func (r ApiListPdpDecisionLogsRequest) Page(page int32) ApiListPdpDecisionLogsRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiListPdpDecisionLogsRequest) PerPage(perPage int32) ApiListPdpDecisionLogsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiListPdpDecisionLogsRequest) Execute() (*models.PaginatedResultOPADecisionLog, *http.Response, error) {
	return r.ApiService.ListPdpDecisionLogsExecute(r)
}

/*
ListPdpDecisionLogs List PDP Decisions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param pdpId The unique id of the pdp
	@return ApiListPdpDecisionLogsRequest
*/
func (a *DecisionLogsApiService) ListPdpDecisionLogs(ctx context.Context, projId string, envId string, pdpId string) ApiListPdpDecisionLogsRequest {
	return ApiListPdpDecisionLogsRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		pdpId:      pdpId,
	}
}

// Execute executes the request
//
//	@return PaginatedResultOPADecisionLog
func (a *DecisionLogsApiService) ListPdpDecisionLogsExecute(r ApiListPdpDecisionLogsRequest) (*models.PaginatedResultOPADecisionLog, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.PaginatedResultOPADecisionLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecisionLogsApiService.ListPdpDecisionLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterToString(r.projId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pdp_id"+"}", url.PathEscape(parameterToString(r.pdpId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.users != nil {
		t := *r.users
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("users", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("users", parameterToString(t, "multi"))
		}
	}
	if r.approved != nil {
		localVarQueryParams.Add("approved", parameterToString(*r.approved, ""))
	}
	if r.resources != nil {
		t := *r.resources
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("resources", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("resources", parameterToString(t, "multi"))
		}
	}
	if r.timestampFrom != nil {
		localVarQueryParams.Add("timestamp_from", parameterToString(*r.timestampFrom, ""))
	}
	if r.timestampTo != nil {
		localVarQueryParams.Add("timestamp_to", parameterToString(*r.timestampTo, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
