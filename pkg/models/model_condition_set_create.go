/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ConditionSetCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionSetCreate{}

// ConditionSetCreate struct for ConditionSetCreate
type ConditionSetCreate struct {
	// A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
	Key  string            `json:"key"`
	Type *ConditionSetType `json:"type,omitempty"`
	// whether the set was autogenerated by the system.
	Autogenerated *bool       `json:"autogenerated,omitempty"`
	ResourceId    *ResourceId `json:"resource_id,omitempty"`
	// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
	Name string `json:"name"`
	// an optional longer description of the set
	Description *string `json:"description,omitempty"`
	// a boolean expression that consists of multiple conditions, with and/or logic.
	Conditions map[string]interface{} `json:"conditions,omitempty"`
	ParentId   *ParentId              `json:"parent_id,omitempty"`
}

// NewConditionSetCreate instantiates a new ConditionSetCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionSetCreate(key string, name string) *ConditionSetCreate {
	this := ConditionSetCreate{}
	this.Key = key
	var type_ ConditionSetType = USERSET
	this.Type = &type_
	var autogenerated bool = false
	this.Autogenerated = &autogenerated
	this.Name = name
	return &this
}

// NewConditionSetCreateWithDefaults instantiates a new ConditionSetCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionSetCreateWithDefaults() *ConditionSetCreate {
	this := ConditionSetCreate{}
	var type_ ConditionSetType = USERSET
	this.Type = &type_
	var autogenerated bool = false
	this.Autogenerated = &autogenerated
	return &this
}

// GetKey returns the Key field value
func (o *ConditionSetCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConditionSetCreate) SetKey(v string) {
	o.Key = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetType() ConditionSetType {
	if o == nil || IsNil(o.Type) {
		var ret ConditionSetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetTypeOk() (*ConditionSetType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConditionSetType and assigns it to the Type field.
func (o *ConditionSetCreate) SetType(v ConditionSetType) {
	o.Type = &v
}

// GetAutogenerated returns the Autogenerated field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetAutogenerated() bool {
	if o == nil || IsNil(o.Autogenerated) {
		var ret bool
		return ret
	}
	return *o.Autogenerated
}

// GetAutogeneratedOk returns a tuple with the Autogenerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetAutogeneratedOk() (*bool, bool) {
	if o == nil || IsNil(o.Autogenerated) {
		return nil, false
	}
	return o.Autogenerated, true
}

// HasAutogenerated returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasAutogenerated() bool {
	if o != nil && !IsNil(o.Autogenerated) {
		return true
	}

	return false
}

// SetAutogenerated gets a reference to the given bool and assigns it to the Autogenerated field.
func (o *ConditionSetCreate) SetAutogenerated(v bool) {
	o.Autogenerated = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetResourceId() ResourceId {
	if o == nil || IsNil(o.ResourceId) {
		var ret ResourceId
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetResourceIdOk() (*ResourceId, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given ResourceId and assigns it to the ResourceId field.
func (o *ConditionSetCreate) SetResourceId(v ResourceId) {
	o.ResourceId = &v
}

// GetName returns the Name field value
func (o *ConditionSetCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConditionSetCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConditionSetCreate) SetDescription(v string) {
	o.Description = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetConditions() map[string]interface{} {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string]interface{} and assigns it to the Conditions field.
func (o *ConditionSetCreate) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ConditionSetCreate) GetParentId() ParentId {
	if o == nil || IsNil(o.ParentId) {
		var ret ParentId
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetCreate) GetParentIdOk() (*ParentId, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ConditionSetCreate) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given ParentId and assigns it to the ParentId field.
func (o *ConditionSetCreate) SetParentId(v ParentId) {
	o.ParentId = &v
}

func (o ConditionSetCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionSetCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Autogenerated) {
		toSerialize["autogenerated"] = o.Autogenerated
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableConditionSetCreate struct {
	value *ConditionSetCreate
	isSet bool
}

func (v NullableConditionSetCreate) Get() *ConditionSetCreate {
	return v.value
}

func (v *NullableConditionSetCreate) Set(val *ConditionSetCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionSetCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionSetCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionSetCreate(val *ConditionSetCreate) *NullableConditionSetCreate {
	return &NullableConditionSetCreate{value: val, isSet: true}
}

func (v NullableConditionSetCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionSetCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
