/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the EnvironmentCopy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentCopy{}

// EnvironmentCopy struct for EnvironmentCopy
type EnvironmentCopy struct {
	TargetEnv TargetEnv `json:"target_env"`
	// Action to take when detecting a conflict when copying. Only applies to copying into an existing environment
	ConflictStrategy *string `json:"conflict_strategy,omitempty"`
	Scope            *Scope  `json:"scope,omitempty"`
}

// NewEnvironmentCopy instantiates a new EnvironmentCopy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentCopy(targetEnv TargetEnv) *EnvironmentCopy {
	this := EnvironmentCopy{}
	this.TargetEnv = targetEnv
	var conflictStrategy string = "fail"
	this.ConflictStrategy = &conflictStrategy
	return &this
}

// NewEnvironmentCopyWithDefaults instantiates a new EnvironmentCopy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentCopyWithDefaults() *EnvironmentCopy {
	this := EnvironmentCopy{}
	var conflictStrategy string = "fail"
	this.ConflictStrategy = &conflictStrategy
	return &this
}

// GetTargetEnv returns the TargetEnv field value
func (o *EnvironmentCopy) GetTargetEnv() TargetEnv {
	if o == nil {
		var ret TargetEnv
		return ret
	}

	return o.TargetEnv
}

// GetTargetEnvOk returns a tuple with the TargetEnv field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetTargetEnvOk() (*TargetEnv, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnv, true
}

// SetTargetEnv sets field value
func (o *EnvironmentCopy) SetTargetEnv(v TargetEnv) {
	o.TargetEnv = v
}

// GetConflictStrategy returns the ConflictStrategy field value if set, zero value otherwise.
func (o *EnvironmentCopy) GetConflictStrategy() string {
	if o == nil || IsNil(o.ConflictStrategy) {
		var ret string
		return ret
	}
	return *o.ConflictStrategy
}

// GetConflictStrategyOk returns a tuple with the ConflictStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetConflictStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictStrategy) {
		return nil, false
	}
	return o.ConflictStrategy, true
}

// HasConflictStrategy returns a boolean if a field has been set.
func (o *EnvironmentCopy) HasConflictStrategy() bool {
	if o != nil && !IsNil(o.ConflictStrategy) {
		return true
	}

	return false
}

// SetConflictStrategy gets a reference to the given string and assigns it to the ConflictStrategy field.
func (o *EnvironmentCopy) SetConflictStrategy(v string) {
	o.ConflictStrategy = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EnvironmentCopy) GetScope() Scope {
	if o == nil || IsNil(o.Scope) {
		var ret Scope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetScopeOk() (*Scope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *EnvironmentCopy) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given Scope and assigns it to the Scope field.
func (o *EnvironmentCopy) SetScope(v Scope) {
	o.Scope = &v
}

func (o EnvironmentCopy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentCopy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["target_env"] = o.TargetEnv
	if !IsNil(o.ConflictStrategy) {
		toSerialize["conflict_strategy"] = o.ConflictStrategy
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableEnvironmentCopy struct {
	value *EnvironmentCopy
	isSet bool
}

func (v NullableEnvironmentCopy) Get() *EnvironmentCopy {
	return v.value
}

func (v *NullableEnvironmentCopy) Set(val *EnvironmentCopy) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCopy) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCopy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCopy(val *EnvironmentCopy) *NullableEnvironmentCopy {
	return &NullableEnvironmentCopy{value: val, isSet: true}
}

func (v NullableEnvironmentCopy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCopy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
