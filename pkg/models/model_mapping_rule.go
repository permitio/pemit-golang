/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the MappingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappingRule{}

// MappingRule struct for MappingRule
type MappingRule struct {
	// The URL to match against the request URL
	Url        string  `json:"url"`
	HttpMethod Methods `json:"http_method"`
	// The resource to match against the request resource
	Resource string `json:"resource"`
	// The headers to match against the request headers
	Headers *map[string]string `json:"headers,omitempty"`
	// The action to match against the request action
	Action *string `json:"action,omitempty"`
	// The priority of the mapping rule. The higher the priority, the higher the precedence
	Priority *int32 `json:"priority,omitempty"`
}

// NewMappingRule instantiates a new MappingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappingRule(url string, httpMethod Methods, resource string) *MappingRule {
	this := MappingRule{}
	this.Url = url
	this.HttpMethod = httpMethod
	this.Resource = resource
	return &this
}

// NewMappingRuleWithDefaults instantiates a new MappingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappingRuleWithDefaults() *MappingRule {
	this := MappingRule{}
	return &this
}

// GetUrl returns the Url field value
func (o *MappingRule) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MappingRule) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MappingRule) SetUrl(v string) {
	o.Url = v
}

// GetHttpMethod returns the HttpMethod field value
func (o *MappingRule) GetHttpMethod() Methods {
	if o == nil {
		var ret Methods
		return ret
	}

	return o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value
// and a boolean to check if the value has been set.
func (o *MappingRule) GetHttpMethodOk() (*Methods, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpMethod, true
}

// SetHttpMethod sets field value
func (o *MappingRule) SetHttpMethod(v Methods) {
	o.HttpMethod = v
}

// GetResource returns the Resource field value
func (o *MappingRule) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *MappingRule) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *MappingRule) SetResource(v string) {
	o.Resource = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *MappingRule) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingRule) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *MappingRule) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *MappingRule) SetHeaders(v map[string]string) {
	o.Headers = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *MappingRule) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingRule) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *MappingRule) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *MappingRule) SetAction(v string) {
	o.Action = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *MappingRule) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappingRule) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *MappingRule) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *MappingRule) SetPriority(v int32) {
	o.Priority = &v
}

func (o MappingRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["http_method"] = o.HttpMethod
	toSerialize["resource"] = o.Resource
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableMappingRule struct {
	value *MappingRule
	isSet bool
}

func (v NullableMappingRule) Get() *MappingRule {
	return v.value
}

func (v *NullableMappingRule) Set(val *MappingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMappingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMappingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappingRule(val *MappingRule) *NullableMappingRule {
	return &NullableMappingRule{value: val, isSet: true}
}

func (v NullableMappingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
