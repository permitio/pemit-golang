/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the Jwks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jwks{}

// Jwks jwks for element frontend only login
type Jwks struct {
	// The keys to match against the request headers
	Keys []map[string]interface{} `json:"keys"`
}

// NewJwks instantiates a new Jwks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJwks(keys []map[string]interface{}) *Jwks {
	this := Jwks{}
	this.Keys = keys
	return &this
}

// NewJwksWithDefaults instantiates a new Jwks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJwksWithDefaults() *Jwks {
	this := Jwks{}
	return &this
}

// GetKeys returns the Keys field value
func (o *Jwks) GetKeys() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *Jwks) GetKeysOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *Jwks) SetKeys(v []map[string]interface{}) {
	o.Keys = v
}

func (o Jwks) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jwks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keys"] = o.Keys
	return toSerialize, nil
}

type NullableJwks struct {
	value *Jwks
	isSet bool
}

func (v NullableJwks) Get() *Jwks {
	return v.value
}

func (v *NullableJwks) Set(val *Jwks) {
	v.value = val
	v.isSet = true
}

func (v NullableJwks) IsSet() bool {
	return v.isSet
}

func (v *NullableJwks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJwks(val *Jwks) *NullableJwks {
	return &NullableJwks{value: val, isSet: true}
}

func (v NullableJwks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJwks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
