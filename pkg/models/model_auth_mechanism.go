/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// AuthMechanism An enumeration.
type AuthMechanism string

// List of AuthMechanism
const (
	BEARER  AuthMechanism = "Bearer"
	BASIC   AuthMechanism = "Basic"
	HEADERS AuthMechanism = "Headers"
)

// All allowed values of AuthMechanism enum
var AllowedAuthMechanismEnumValues = []AuthMechanism{
	"Bearer",
	"Basic",
	"Headers",
}

func (v *AuthMechanism) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthMechanism(value)
	for _, existing := range AllowedAuthMechanismEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthMechanism", value)
}

// NewAuthMechanismFromValue returns a pointer to a valid AuthMechanism
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthMechanismFromValue(v string) (*AuthMechanism, error) {
	ev := AuthMechanism(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthMechanism: valid values are %v", v, AllowedAuthMechanismEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthMechanism) IsValid() bool {
	for _, existing := range AllowedAuthMechanismEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthMechanism value
func (v AuthMechanism) Ptr() *AuthMechanism {
	return &v
}

type NullableAuthMechanism struct {
	value *AuthMechanism
	isSet bool
}

func (v NullableAuthMechanism) Get() *AuthMechanism {
	return v.value
}

func (v *NullableAuthMechanism) Set(val *AuthMechanism) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthMechanism) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthMechanism) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthMechanism(val *AuthMechanism) *NullableAuthMechanism {
	return &NullableAuthMechanism{value: val, isSet: true}
}

func (v NullableAuthMechanism) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthMechanism) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
