/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ConditionSetUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionSetUpdate{}

// ConditionSetUpdate struct for ConditionSetUpdate
type ConditionSetUpdate struct {
	// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
	Name *string `json:"name,omitempty"`
	// an optional longer description of the set
	Description *string `json:"description,omitempty"`
	// a boolean expression that consists of multiple conditions, with and/or logic.
	Conditions map[string]interface{} `json:"conditions,omitempty"`
	ParentId   *ParentId              `json:"parent_id,omitempty"`
}

// NewConditionSetUpdate instantiates a new ConditionSetUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionSetUpdate() *ConditionSetUpdate {
	this := ConditionSetUpdate{}
	return &this
}

// NewConditionSetUpdateWithDefaults instantiates a new ConditionSetUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionSetUpdateWithDefaults() *ConditionSetUpdate {
	this := ConditionSetUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConditionSetUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConditionSetUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConditionSetUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConditionSetUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConditionSetUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConditionSetUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ConditionSetUpdate) GetConditions() map[string]interface{} {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetUpdate) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ConditionSetUpdate) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string]interface{} and assigns it to the Conditions field.
func (o *ConditionSetUpdate) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ConditionSetUpdate) GetParentId() ParentId {
	if o == nil || IsNil(o.ParentId) {
		var ret ParentId
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionSetUpdate) GetParentIdOk() (*ParentId, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ConditionSetUpdate) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given ParentId and assigns it to the ParentId field.
func (o *ConditionSetUpdate) SetParentId(v ParentId) {
	o.ParentId = &v
}

func (o ConditionSetUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionSetUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableConditionSetUpdate struct {
	value *ConditionSetUpdate
	isSet bool
}

func (v NullableConditionSetUpdate) Get() *ConditionSetUpdate {
	return v.value
}

func (v *NullableConditionSetUpdate) Set(val *ConditionSetUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionSetUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionSetUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionSetUpdate(val *ConditionSetUpdate) *NullableConditionSetUpdate {
	return &NullableConditionSetUpdate{value: val, isSet: true}
}

func (v NullableConditionSetUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionSetUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
