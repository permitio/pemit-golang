/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Methods An enumeration.
type Methods string

// List of Methods
const (
	GET     Methods = "get"
	POST    Methods = "post"
	PUT     Methods = "put"
	PATCH   Methods = "patch"
	DELETE  Methods = "delete"
	HEAD    Methods = "head"
	OPTIONS Methods = "options"
)

// All allowed values of Methods enum
var AllowedMethodsEnumValues = []Methods{
	"get",
	"post",
	"put",
	"patch",
	"delete",
	"head",
	"options",
}

func (v *Methods) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Methods(value)
	for _, existing := range AllowedMethodsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Methods", value)
}

// NewMethodsFromValue returns a pointer to a valid Methods
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMethodsFromValue(v string) (*Methods, error) {
	ev := Methods(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Methods: valid values are %v", v, AllowedMethodsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Methods) IsValid() bool {
	for _, existing := range AllowedMethodsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Methods value
func (v Methods) Ptr() *Methods {
	return &v
}

type NullableMethods struct {
	value *Methods
	isSet bool
}

func (v NullableMethods) Get() *Methods {
	return v.value
}

func (v *NullableMethods) Set(val *Methods) {
	v.value = val
	v.isSet = true
}

func (v NullableMethods) IsSet() bool {
	return v.isSet
}

func (v *NullableMethods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethods(val *Methods) *NullableMethods {
	return &NullableMethods{value: val, isSet: true}
}

func (v NullableMethods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
